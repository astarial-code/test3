apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco-android'
apply plugin: 'com.github.dcendents.android-maven'

group = 'com.github.rubygarage'

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration["androidCompileSdkVersion"]
    defaultConfig {
        minSdkVersion globalConfiguration["androidMinSdkVersion"]
        targetSdkVersion globalConfiguration["androidTargetSdkVersion"]
        versionCode 1
        versionName globalConfiguration["versionName"]

        testInstrumentationRunner globalConfiguration["testInstrumentationRunner"]
    }
}

androidExtensions {
    experimental = true
}

jacocoAndroidUnitTestReport {
    csv.enabled false
    html.enabled false
    xml.enabled true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion"

    testImplementation "junit:junit:$junitVersion"
}

project.afterEvaluate {
    android.libraryVariants.all { variant ->
        def realVariantName = variant.name
        def variantName = variant.name.capitalize()

        def task = project.tasks["jacocoTest${variantName}UnitTestReport"]
        def defaultExcludes = task.classDirectories.excludes

        def additionalExcludes = [

        ]

        def excludes = defaultExcludes + additionalExcludes

        def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/${realVariantName}", excludes: excludes)

        task.classDirectories.excludes = excludes
        task.classDirectories += kotlinDebugTree
    }
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}